html运行机制
输入网址，
1.浏览器查找域名的ip，浏览器先解析域名，在本地hosts文件中查找是否有对应ip
如果没有，浏览器发一个dns请求到本地dns服务器，本地dns服务器如果没有，会向dns根服务器发请求
本地dns服务器返回对应域名和ip地址并缓存
2.建立tcp链接
客户端发送SYN标志的数据包给服务端，服务端返回一个带SYN标志的数据包表示确认信息，客户端再回传一个ACK包表示连接成功
3.浏览器向web服务器发起http请求
4.服务器端处理，返回对应资源
5.关闭tcp链接
6.渲染DOM树，然后构建CSSOM树，布局渲染树，绘制渲染树。
btyes => character => token => nodes => DOM

DNS 解析
TCP 连接
发送 HTTP 请求
服务器处理请求并返回 HTTP 报文
浏览器解析渲染页面
连接结束





闭包
局部变量无法共享和长久保存，全局变量可能会造成变量污染，闭包可以长久保存变量又不造成内存污染
闭包满足条件： 返回的是一个函数，且这个函数对局部变量存在引用，就会形成闭包
闭包在js中是一个很常见的一个结构，它允许你访问父级作用域的变量，并在持续保持引用时保证父级作用域的这个变量不会被内存回收机制回收。
闭包就是一个函数引用另外一个函数的变量，因为变量被引用者所以不会被回收，因此可以用来封装私有变量，不必要的闭包会增加内存消耗








回流与重绘
当页面的某部分元素发生了尺寸、位置、隐藏发生了改变，页面进行回流。得对整个页面重新进行布局计算，将所有尺寸，位置受到影响的元素回流。
当页面的某部分元素的外观发生了改变，但尺寸、位置、隐藏没有改变，页面进行重绘。

触发重排的原因
1.页面初始化渲染 - 窗口的尺寸变化 - 元素的尺寸、位置、隐藏变化 - DOM结构发生变化，如删除节点 - 获取某些属性，引发回流 （ 很多浏览器会对回流进行优化，一定时间段后或数量达到阕值时，做一次批处理回流。）
2获取一些属性时，浏览器为了返回正确的值也会触发回流，导致浏览器优化无效，有： 1. offset（top/bottom/left/right） 2. client (top/bottom/left/right) 3. scroll (top/bottom/left/right) 4. getComputedStyle() 5. width,height
3.字体大小修改及内容更新也会导致回流

减少回流
absolute、fixed布局，可以使该元素脱离文档流
硬件加速






前端模糊查询
前端模糊查询（filter方法返回indexOf不等于-1），数据累加（使用reduce方法在computed中操作）
let arr = [1,'aa','sd',33]
let arr2 = arr.reduce((total, currentVal, currentIndex, arr) => {
    return total+currentVal
})






http/https
http 1. 通信使用明文，若被抓包，则直接被窃取信息 
2. 不验证与自身通信者的身份，有可能遭到伪装
3. 无法证明报文是否被篡改
https 需要用到ca申请证书，需要一定费用
http是超文本传输协议，信息明文传输，https是ssl加密传输协议
http和https连接方式不同，前者80端口后者443
http连接简单无状态 https是ssl+http协议构建的可进行加密传输，身份认证的网络协议







数组去重
let arr = [1,3,3,5,'asd',12,2,1]
let arr2 = [...new Set(arr)] || Array.form(new set(arr))
let arr3 = arr.filter((item,index,arr) => {
    return  arr.indexOf(item, 0) === index 
})








class
class Father {
    constructor() {
        this.name = 'Father'
        this.age = 60
    }
    say() {
        console.log(this.name+' say')
    }
}
class Child extends Father {
    constructor() {
        super()
        this.name = 'Child'
        this.age = 29
    hello() {
        console.log('hello')
    }
}
简单写法
class Child extends Father {
    name = 'Child'
    age = 29
    hello() {
        console.log('hello')
    }
}








深拷贝和浅拷贝
JSON.stringify() 
问题：
1.如果深拷贝对象中有函数或者undefined的情况会跳过
2.Date.now()方法可以获得时间戳,深拷贝对象中如果有时间格式，则会从字符串转化成对象格式

Object.assign()可以实现简单的深拷贝（二级之前）
遍历旧对象，判断对应的值是数组还是对象，都不是就直接赋值，如果是数组或者是对象，先在新对象中创建一个数组/对象，然后进行深拷贝













判断是否为数组
typeof()   instanceof()    constructor属性 obj.constructor === Array
Object.prototype.toString().call() == '[object Array]'
Array.isArray()









函数防抖
防抖：在事件触发n秒后进行回调，如果在n秒内再次触发，则重新计时









Promise 及其api
深拷贝 手写


vue生命周期 响应式原理 数据双向绑定原理
P129
Object.defineProperty
vue再初始化数据initdata方法时，会给data中的属性使用Object.defineProperty重新定义所有属性
当页面去到对应属性时，会进行依赖收集（收集当前组件的wather），如果属性发生变化会通知相关依赖更新操作





BFC flex布局
BFC可以理解为元素的一个属性，被BFC包裹着的元素不会脱离文档流，可以用来避免外边距合并，清除浮动








h5新增元素 header footer nav section aside
存储方面 localStorage sessionStorage 
canvas绘图
本地离线存储 manifest文件
css3 border-radius box-shadow tranfrom animation
字符串方面 includes() startsWith() endsWith()
字符串模板`<span>${title}</span>`



Object.is(+0,-0)
false
+0 === -0
true
Object.is(NaN,NaN)
true
NaN === NaN
false






mockjs 
json5   文件后缀名改为json5